<?php
/**
 * Created by PhpStorm.
 * User: vlson
 * Date: 2019/5/5
 * Time: 15:20
 */

namespace frontend\controllers;

use common\models\Like;
use Yii;
use common\models\Article;
use yii\base\Response;
use yii\data\Pagination;

class BlogController extends PublicController
{
    /**
     * @return array
     */
    public function behaviors()
    {
        return parent::behaviors(); // TODO: Change the autogenerated stub
    }

    public function actionIndex(){
        $query = Article::find()->where(['status'=>1])->orderBy(["created_at"=>SORT_DESC]);

        //分页
        $pagination = new Pagination([
            'totalCount'    =>  $query->count(),
            'defaultPageSize'   =>  10,
        ]);

        $blog_list = $query->select(['id', 'title', 'abstract', 'cover', 'read_num', 'like_num', 'label', 'created_at'])
            ->offset($pagination->offset)
            ->limit($pagination->limit)
            ->asArray()
            ->all();

        return $this->render('index', [
            "blog_list"  =>  $blog_list,
            "pagination"  =>  $pagination,
        ]);
    }

    public function actionArticle(){
        $id = Yii::$app->request->get('id');
        $article = Article::find()
            ->select(['id', 'title', 'abstract', 'content_html', 'cover', 'read_num', 'like_num', 'label', 'created_at'])
            ->where(['id'=>$id, 'status'=>1])
            ->asArray()
            ->one();
        if(!$article){
            return $this->redirect(['index']);
        }

        $prev_art = Article::find()
            ->select(['id', 'title', 'abstract', 'cover', 'created_at'])
            ->where(['status'=>1])
            ->andFilterWhere(['<', 'id', $id])
            ->orderBy(['id'=>SORT_DESC])
            ->asArray()
            ->one();

        $next_art = Article::find()
            ->select(['id', 'title', 'abstract', 'cover', 'created_at'])
            ->where(['status'=>1])
            ->andFilterWhere(['>', 'id', $id])
            ->orderBy(['id'=>SORT_ASC])
            ->asArray()
            ->one();

        return $this->render('article', [
            'article'   =>  $article,
            'prev_art'   =>  $prev_art,
            'next_art'   =>  $next_art,
        ]);
    }

    public function actionLike(){
        Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        $likeModel = new Like();
        $result = [
            'flag'  =>  false,
            'msg'   =>  'fail',
        ];
        $like_data['art_id'] = Yii::$app->request->post('art_id');
        $like_data['ip'] = Yii::$app->request->userIP;
        $like_data['status'] = 1;

        $model = Like::find()
            ->where($like_data)
            ->all();
        if($model){
            $result['msg'] = '已点赞';
            return $result;
        }
        if($likeModel->load(['like_form'=>$like_data], 'like_form') && $likeModel->validate()){
            $likeModel->save();
            $art_model = Article::find()
                ->where(['id'=>$like_data['art_id'], 'status'=>1])
                ->one();
            $art_model->like_num += 1;
            $art_model->save();
            $result['flag'] = true;
            $result['msg'] = 'success';
            return $result;
        }else{
            $result['msg'] = '点赞失败';
            return $result;
        }
    }
}